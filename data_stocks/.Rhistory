# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
# Add a blue point for the most central stock (by MBD) using columns 3 and 4.
points(st[mdMBD, 3], st[mdMBD, 4], pch = 23, col = "blue", bg = "blue", lwd = 2)
# Add a red point for the coordinate-wise median of columns 3 and 4.
points(median(st[, 3]), median(st[, 4]), pch = 24, col = "red", bg = "red", lwd = 2)
# Add a legend to the top right corner
legend("topright",
legend = c("Most Central (MBD)", "Median"),
pch = c(23, 24),
col = c("blue", "red"),
pt.bg = c("blue", "red"),
lwd = 2)
# Close the device to save the file.
dev.off()
png("Friman.png", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
# Add a blue point for the most central stock (by MBD) using columns 3 and 4.
points(st[mdFM,3], st[mdFM,4], pch=23, col="green", bg="green", lwd=2)
# Add a red point for the coordinate-wise median of columns 3 and 4.
points(median(st[, 3]), median(st[, 4]), pch = 24, col = "red", bg = "red", lwd = 2)
# Add a legend to the top right corner
legend("topright",
legend = c("Most Central (MBD)", "Median"),
pch = c(23, 24),
col = c("blue", "red"),
pt.bg = c("blue", "red"),
lwd = 2)
# Close the device to save the file.
dev.off()
plot(st)
points(st[mdMBD,3], st[mdMBD,4], pch=23, col="blue", bg="blue", lwd=2)
points(st[mdFM,3], st[mdFM,4], pch=23, col="green", bg="green", lwd=2)
points(median(st[,3]), median(st[,4]), pch=24, col="red", bg="red", lwd=2)
plot(st)
points(st[mdMBD,5], st[mdMBD,6], pch=23, col="blue", bg="blue", lwd=2)
points(st[mdFM,5], st[mdFM,6], pch=23, col="green", bg="green", lwd=2)
points(median(st[,5]), median(st[,6]), pch=24, col="red", bg="red", lwd=2)
plot(st)
points(st[mdMBD,5], st[mdMBD,6], pch=23, col="blue", bg="blue", lwd=2)
png("Friman.png", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
# Add a blue point for the most central stock (by MBD) using columns 3 and 4.
points(st[mdFM,3], st[mdFM,4], pch=23, col="green", bg="green", lwd=2)
# Add a red point for the coordinate-wise median of columns 3 and 4.
points(median(st[, 3]), median(st[, 4]), pch = 24, col = "red", bg = "red", lwd = 2)
# Add a legend to the top right corner
legend("topright",
legend = c("Most Central (MBD)", "Median"),
pch = c(23, 24),
col = c("blue", "red"),
pt.bg = c("blue", "red"),
lwd = 2m cex = 2)
png("Friman.png", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
# Add a blue point for the most central stock (by MBD) using columns 3 and 4.
points(st[mdFM,3], st[mdFM,4], pch=23, col="green", bg="green", lwd=2)
# Add a red point for the coordinate-wise median of columns 3 and 4.
points(median(st[, 3]), median(st[, 4]), pch = 24, col = "red", bg = "red", lwd = 2)
# Add a legend to the top right corner
legend("topright",
legend = c("Most Central (MBD)", "Median"),
pch = c(23, 24),
col = c("blue", "red"),
pt.bg = c("blue", "red"),
lwd = 2m cex = 2)
png("Friman.png", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
# Add a blue point for the most central stock (by MBD) using columns 3 and 4.
points(st[mdFM,3], st[mdFM,4], pch=23, col="green", bg="green", lwd=2)
# Add a red point for the coordinate-wise median of columns 3 and 4.
points(median(st[, 3]), median(st[, 4]), pch = 24, col = "red", bg = "red", lwd = 2)
# Add a legend to the top right corner
legend("topright",
legend = c("Most Central (MBD)", "Median"),
pch = c(23, 24),
col = c("blue", "red"),
pt.bg = c("blue", "red"),
lwd = 2,cex = 2)
# Close the device to save the file.
dev.off()
png("Friman.png", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
# Add a blue point for the most central stock (by MBD) using columns 3 and 4.
points(st[mdFM,3], st[mdFM,4], pch=23, col="green", bg="green", lwd=2)
# Add a red point for the coordinate-wise median of columns 3 and 4.
points(median(st[, 3]), median(st[, 4]), pch = 24, col = "red", bg = "red", lwd = 2)
# Add a legend to the top right corner
legend("topright",
legend = c("Most Central (MBD)", "Median"),
pch = c(23, 24),
col = c("blue", "red"),
pt.bg = c("blue", "red"),
lwd = 2,cex = 1.8)
# Close the device to save the file.
dev.off()
png("MBD.png", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
# Add a blue point for the most central stock (by MBD) using columns 3 and 4.
points(st[mdMBD,5], st[mdMBD,6], pch=23, col="blue", bg="blue", lwd=2)
# Add a red point for the coordinate-wise median of columns 3 and 4.
points(median(st[, 3]), median(st[, 4]), pch = 24, col = "red", bg = "red", lwd = 2)
# Add a legend to the top right corner
legend("topright",
legend = c("Most Central (MBD)", "Median"),
pch = c(23, 24),
col = c("blue", "red"),
pt.bg = c("blue", "red"),
lwd = 2,cex = 1.8)
# Close the device to save the file.
dev.off()
png("MBD.png", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
# Add a blue point for the most central stock (by MBD) using columns 3 and 4.
points(st[mdMBD,5], st[mdMBD,6], pch=23, col="blue", bg="blue", lwd=2)
# Add a red point for the coordinate-wise median of columns 3 and 4.
points(median(st[, 3]), median(st[, 4]), pch = 24, col = "red", bg = "red", lwd = 2)
# Add a legend to the top right corner
legend("topright",
legend = c("Most Central (MBD)", "Median"),
pch = c(23, 24),
col = c("blue", "red"),
pt.bg = c("blue", "red"),
lwd = 2,cex = 1.6)
# Close the device to save the file.
dev.off()
png("Friman", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
# Add a blue point for the most central stock (by MBD) using columns 3 and 4.
points(st[mdFM,5], st[mdFM,6], pch=23, col="green", bg="green", lwd=2)
# Add a red point for the coordinate-wise median of columns 3 and 4.
points(median(st[, 3]), median(st[, 4]), pch = 24, col = "red", bg = "red", lwd = 2)
# Add a legend to the top right corner
legend("topright",
legend = c("Friman-Munith depth", "Median"),
pch = c(23, 24),
col = c("blue", "red"),
pt.bg = c("blue", "red"),
lwd = 2,cex = 1.6)
# Close the device to save the file.
dev.off()
png("Friman", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
# Add a blue point for the most central stock (by MBD) using columns 3 and 4.
points(st[mdFM,5], st[mdFM,6], pch=23, col="green", bg="green", lwd=2)
# Add a red point for the coordinate-wise median of columns 3 and 4.
points(median(st[, 3]), median(st[, 4]), pch = 24, col = "red", bg = "red", lwd = 2)
# Add a legend to the top right corner
legend("topright",
legend = c("Friman-Munith depth", "Median"),
pch = c(23, 24),
col = c("blue", "red"),
pt.bg = c("blue", "red"),
lwd = 2,cex = 1.6)
# Close the device to save the file.
dev.off()
png("Friman.png", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
# Add a blue point for the most central stock (by MBD) using columns 3 and 4.
points(st[mdFM,5], st[mdFM,6], pch=23, col="green", bg="green", lwd=2)
# Add a red point for the coordinate-wise median of columns 3 and 4.
points(median(st[, 3]), median(st[, 4]), pch = 24, col = "red", bg = "red", lwd = 2)
# Add a legend to the top right corner
legend("topright",
legend = c("Friman-Munith depth", "Median"),
pch = c(23, 24),
col = c("blue", "red"),
pt.bg = c("blue", "red"),
lwd = 2,cex = 1.6)
# Close the device to save the file.
dev.off()
logprecvar.bifd = var.fd(smooth.fd)
print(range(logprecvar.bifd$argvals))
weektime = seq(1,156)
logprecvar_mat = eval.bifd(weektime, weektime,
logprecvar.bifd)
persp(weektime, weektime, logprecvar_mat,
theta=-45, phi=25, r=3, expand = 0.5,
ticktype='detailed',
xlab="Day",
ylab="Day",
zlab="variance(log10 precip)")
contour(weektime, weektime, logprecvar_mat,
xlab="Day",
ylab="Day")
day5time = seq(1,365,5)
logprec.varmat = eval.bifd(day5time, day5time,
logprecvar.bifd)
logprecvar.bifd = var.fd(smooth.fd)
print(range(logprecvar.bifd$argvals))
weektime = seq(1,156)
logprecvar_mat = eval.bifd(weektime, weektime,
logprecvar.bifd)
persp(weektime, weektime, logprecvar_mat,
theta=-45, phi=25, r=3, expand = 0.5,
ticktype='detailed',
xlab="Day",
ylab="Day",
zlab="variance(log10 precip)")
logprecvar.bifd = var.fd(smooth.fd)
print(range(logprecvar.bifd$argvals))
weektime = seq(1,156)
logprecvar_mat = eval.bifd(weektime, weektime,
logprecvar.bifd)
persp(weektime, weektime, logprecvar_mat,
theta=-45, phi=25, r=3, expand = 0.5,
ticktype='detailed',
xlab="Week",
ylab="Week",
zlab="variance(log10 precip)")
contour(weektime, weektime, logprecvar_mat,
xlab="Day",
ylab="Day")
logprecvar.bifd = var.fd(smooth.fd)
print(range(logprecvar.bifd$argvals))
weektime = seq(1,156, length = 36)
logprecvar_mat = eval.bifd(weektime, weektime,
logprecvar.bifd)
persp(weektime, weektime, logprecvar_mat,
theta=-45, phi=25, r=3, expand = 0.5,
ticktype='detailed',
xlab="Week",
ylab="Week",
zlab="variance(log10 precip)")
logprecvar_mat = eval.bifd(weektime, weektime,
logprecvar.bifd)
persp(weektime, weektime, logprecvar_mat,
theta=-30, phi=25, r=3, expand = 0.5,
ticktype='detailed',
xlab="Week",
ylab="Week",
zlab="variance(log10 precip)")
persp(weektime, weektime, logprecvar_mat,
theta=-20, phi=25, r=3, expand = 0.5,
ticktype='detailed',
xlab="Week",
ylab="Week",
zlab="variance(log10 precip)")
logprecvar_mat = eval.bifd(weektime, weektime,
logprecvar.bifd)
persp(weektime, weektime, logprecvar_mat,
theta=-20, phi=30, r=3, expand = 0.5,
ticktype='detailed',
xlab="Week",
ylab="Week",
zlab="variance")
logprecvar_mat = eval.bifd(weektime, weektime,
logprecvar.bifd)
persp(weektime, weektime, logprecvar_mat,
theta=-20, phi=30, r=3.5, expand = 0.5,
ticktype='detailed',
xlab="Week",
ylab="Week",
zlab="variance")
persp(weektime, weektime, logprecvar_mat,
theta=-20, phi=30, r=4, expand = 0.5,
ticktype='detailed',
xlab="Week",
ylab="Week",
zlab="variance")
persp(weektime, weektime, logprecvar_mat,
theta=-20, phi=35, r=3, expand = 0.5,
ticktype='detailed',
xlab="Week",
ylab="Week",
zlab="variance")
persp(weektime, weektime, logprecvar_mat,
theta=-20, phi=25, r=3, expand = 0.5,
ticktype='detailed',
xlab="Week",
ylab="Week",
zlab="variance")
persp(weektime, weektime, logprecvar_mat,
theta=-20, phi=20, r=3, expand = 0.5,
ticktype='detailed',
xlab="Week",
ylab="Week",
zlab="variance")
png("Variance_perspective.png", width = 1200, height = 100)
# Create the perspective plot
persp(weektime, weektime, logprecvar_mat,
theta = -20, phi = 20, r = 3, expand = 0.5,
ticktype = 'detailed',
xlab = "Week",
ylab = "Week",
zlab = "variance")
png("Variance_perspective.png", width = 1200, height = 1000)
# Create the perspective plot
persp(weektime, weektime, logprecvar_mat,
theta = -20, phi = 20, r = 3, expand = 0.5,
ticktype = 'detailed',
xlab = "Week",
ylab = "Week",
zlab = "variance")
# Close the device to finalize and save the file
dev.off()
png("Counter_plot.png", width = 1200, height = 1000)
contour(weektime, weektime, logprecvar_mat,
xlab="Day",
ylab="Day")
dev.off()
png("Coontour.png", width = 1200, height = 1000)
day5time = seq(1,156,36)
logprec.varmat = eval.bifd(day5time, day5time,
logprecvar.bifd)
contour(day5time, day5time, logprec.varmat,
xlab="Day",
ylab="Day", lwd=2,
labcex=1)
dev.off()
png("Coontour.png", width = 1200, height = 1000)
day5time = seq(1,156)
logprec.varmat = eval.bifd(day5time, day5time,
logprecvar.bifd)
contour(day5time, day5time, logprec.varmat,
xlab="Day",
ylab="Day", lwd=2,
labcex=1)
dev.off()
persp(weektime, weektime, logprecvar_mat,
theta = -20, phi = 20, r = 3, expand = 0.5,
ticktype = 'detailed',
xlab = "Week",
ylab = "Week",
zlab = "variance",labcex=2)
# Close the device to finalize and save the file
dev.off()
png("Coontour.png", width = 1200, height = 1000)
day5time = seq(1,156)
logprec.varmat = eval.bifd(day5time, day5time,
logprecvar.bifd)
contour(day5time, day5time, logprec.varmat,
xlab="Day",
ylab="Day", lwd=2.2,
labcex=2)
dev.off()
boxplot(smooth.fd)
boxplot(smooth.fd)
par( mfrow=c(2, 2) )
plot(func.mean(working), ylim = c(10, 170),
main = "Centrality measures in working days")
plot(func.mean(working), ylim = c(10, 170),
main = "Centrality measures in working days")
plot(func.mean(working), ylim = c(10, 170),
main = "Centrality measures in working days")
plot(func.var(nonworking),
main = "Dispersion measures in non-working days", ylim = c(100, 5500))
D1 <- deriv.fd(smooth.fd, deriv = 1)
D2 <- deriv.fd(smooth.fd, deriv = 2)
plot(D1)
png("first_derivative.png", width = 1200, height = 800)
plot(D1, , lwd = 2, main = "First Derivative",
xlab = "Time", ylab = "First Derivative Value",cex = 2,cex.lab = 1.8,    # Axis labels
cex.axis = 1.8, # Axis tick labels
cex.main = 2,   # Main title
cex.sub = 2)
legend("topright", legend = "First Derivative", col = "blue", lwd = 2)
dev.off()  # Close the device to save the plot
# 2. Save Second Derivative Plot
png("second_derivative.png", width = 1200, height = 800)
png("first_derivative.png", width = 1200, height = 800)
plot(D1, , lwd = 2, main = "First Derivative",
xlab = "Time", ylab = "First Derivative Value",cex = 2,cex.lab = 1.8,    # Axis labels
cex.axis = 1.8, # Axis tick labels
cex.main = 2,   # Main title
cex.sub = 2)
legend("topright", legend = "First Derivative", col = "blue", lwd = 2)
dev.off()  # Close the device to save the plot
png("second_derivative.png", width = 1200, height = 800)
plot(D2, lwd = 2, main = "Second Derivative",
xlab = "Time", ylab = "Second Derivative Value",cex = 2,cex.lab = 1.8,    # Axis labels
cex.axis = 1.8, # Axis tick labels
cex.main = 2,   # Main title
cex.sub = 2)
dev.off()  # Close the device to save the plot
png("second_derivative.png", width = 1200, height = 800)
plot(D2, lwd = 2, main = "Second Derivative",
xlab = "Time", ylab = "Second Derivative Value",cex = 2,cex.lab = 1.8,    # Axis labels
cex.axis = 1.8, # Axis tick labels
cex.main = 2,   # Main title
cex.sub = 2)
dev.off()  # Close the device to save the plot
setwd(file.path(getwd(), "data_stocks"))
st <- read.csv("weekly_stock_prices_cleaned.csv")
head(st)
st <- st[, -1]
log_returns <- apply(st, 2, function(x) c(diff(log(x))))
st <- 100*log_returns
st <- data.frame(st)
dim(log_returns)
png("After_log.png", width = 1000, height = 800)
plot(st$SPOT.Close, type="l", col="blue", lwd=2, xlab="", ylab="SPOT Close",
main="SPOT Close Prices After Transformation", cex = 2,cex.lab = 1.8,    # Axis labels
cex.axis = 1.8, # Axis tick labels
cex.main = 2,   # Main title
cex.sub = 2)
dev.off()
png("Friman.png", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
png("Friman.png", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
png("Friman.png", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
png("Friman.png", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
png("Friman.png", width = 1000, height = 800)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
# Add a blue point for the most central stock (by MBD) using columns 3 and 4.
points(st[mdFM,5], st[mdFM,6], pch=23, col="blue", bg="blue", lwd=2)
# Add a red point for the coordinate-wise median of columns 3 and 4.
points(median(st[, 3]), median(st[, 4]), pch = 24, col = "red", bg = "red", lwd = 2)
# Add a legend to the top right corner
legend("topright",
legend = c("Friman-Munith depth", "Median"),
pch = c(23, 24),
col = c("blue", "red"),
pt.bg = c("blue", "red"),
lwd = 2,cex = 1.6)
# Close the device to save the file.
dev.off()
png("Friman.png", width = 1000, height = 800)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
# Add a blue point for the most central stock (by MBD) using columns 3 and 4.
points(st[mdFM,5], st[mdFM,6], pch=23, col="blue", bg="blue", lwd=2)
# Add a red point for the coordinate-wise median of columns 3 and 4.
points(median(st[, 3]), median(st[, 4]), pch = 24, col = "red", bg = "red", lwd = 2)
# Add a legend to the top right corner
legend("topright",
legend = c("Friman-Munith depth", "Median"),
pch = c(23, 24),
col = c("blue", "red"),
pt.bg = c("blue", "red"),
lwd = 2,cex = 1.6)
# Close the device to save the file.
dev.off()
png("Friman.png", width = 1000, height = 800)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
# Add a blue point for the most central stock (by MBD) using columns 3 and 4.
points(st[mdFM,5], st[mdFM,6], pch=23, col="blue", bg="blue", lwd=2)
# Add a red point for the coordinate-wise median of columns 3 and 4.
points(median(st[, 3]), median(st[, 4]), pch = 24, col = "red", bg = "red", lwd = 2)
# Add a legend to the top right corner
legend("topright",
legend = c("Friman-Munith depth", "Median"),
pch = c(23, 24),
col = c("blue", "red"),
pt.bg = c("blue", "red"),
lwd = 2,cex = 1.6)
# Close the device to save the file.
dev.off()
png("Friman.png", width = 1000, height = 800)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
# Add a blue point for the most central stock (by MBD) using columns 3 and 4.
points(st[mdFM,5], st[mdFM,6], pch=23, col="blue", bg="blue", lwd=2)
# Add a red point for the coordinate-wise median of columns 3 and 4.
points(median(st[, 3]), median(st[, 4]), pch = 24, col = "red", bg = "red", lwd = 2)
# Add a legend to the top right corner
legend("topright",
legend = c("Friman-Munith depth", "Median"),
pch = c(23, 24),
col = c("blue", "red"),
pt.bg = c("blue", "red"),
lwd = 2,cex = 1.6)
# Close the device to save the file.
dev.off()
png("Friman.png", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
png("Friman.png", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
png("Friman.png", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
png("Friman.png", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
png("Friman.png", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
png("Friman.png", width = 800, height = 600)
# Plot the data in st (this will use the default plot method for a matrix)
plot(st, main = "Stock Data with Depth", cex.main = 2)
plot(st, main = "Stock Data with Depth", cex.main = 2)
plot(st, main = "Stock Data with Depth", cex.main = 2)
plot(st, main = "Stock Data with Depth", cex.main = 2)
path <- getwd()
setwd(file.path(getwd(), "data_stocks"))
st <- read.csv("weekly_stock_prices_cleaned.csv")
st <- st[, -1]
log_returns <- apply(st, 2, function(x) c(diff(log(x))))
st <- 100*log_returns
st <- data.frame(st)
dim(log_returns)
