tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.003, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = "auto")
plotcp(tree1)
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = "auto")
plotcp(tree1)
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.004, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = "auto")
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.003, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = "auto")
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.003, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = "auto")
plotcp(tree1)
tree.pred = predict(tree1, dtest, type="class")
table(tree.pred, dtest$satisfaction)
confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
cm3 <- confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
cm3_matrix <- as.matrix(cm3$table)
tree1 <- rpart(satisfaction ~ ., data = dtrain)
printcp(tree1)
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = "auto")
plotcp(tree1)
tree.pred = predict(tree1, dtest, type="class")
table(tree.pred, dtest$satisfaction)
confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.001, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = "auto")
plotcp(tree1)
tree.pred = predict(tree1, dtest, type="class")
table(tree.pred, dtest$satisfaction)
confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.002, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.003, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = "auto")
plotcp(tree1)
tree.pred = predict(tree1, dtest, type="class")
table(tree.pred, dtest$satisfaction)
confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.004, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = "auto")
plotcp(tree1)
tree.pred = predict(tree1, dtest, type="class")
table(tree.pred, dtest$satisfaction)
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.004, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = "auto")
plotcp(tree1)
tree.pred = predict(tree1, dtest, type="class")
table(tree.pred, dtest$satisfaction)
confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.003, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = "auto")
plotcp(tree1)
tree.pred = predict(tree1, dtest, type="class")
table(tree.pred, dtest$satisfaction)
confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.002, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = "auto")
plotcp(tree1)
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.001, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = "auto")
plotcp(tree1)
tree.pred = predict(tree1, dtest, type="class")
table(tree.pred, dtest$satisfaction)
confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.002, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = "auto")
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.003, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = "auto")
plotcp(tree1)
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.003, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = "auto")
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = c("#FC4E07", "#1B80BF"))
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.7, box.palette = c("#FC4E07", "#1B80BF"))
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.65, box.palette = c("#FC4E07", "#1B80BF"))
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = c("#FC4E07", "#1B80BF"))
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.5, box.palette = c("#FC4E07", "#1B80BF"))
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = c("#FC4E07", "#1B80BF"))
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = c("#FC4E07", "#1B80BF"),
box.width = 0.1, box.height = 0.1)
rpart.plot(tree1, digits = 2, under = TRUE, cex = 0.6, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.2, extra = 0, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.2, extra = 0, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1, extra = 0, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.1, extra = 0, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1, extra = 0, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 0, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.2, extra = 0, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1, extra = 0, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.3, extra = 0, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 0, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 0, branch = 0.5, col = "white")
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.003, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
formattable(as.data.frame(printcp(tree1)))
formattable(as.data.frame(printcp(tree1),
list('CP' = color_tile("transparent", "lightblue"),
'rel error' = color_tile("transparent", "lightblue"),
'xerror' = color_tile("transparent", "lightblue"))))
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.003, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
formattable(as.data.frame(printcp(tree1),
list('CP' = color_tile("transparent", "lightblue"),
'rel error' = color_tile("transparent", "lightblue"),
'xerror' = color_tile("transparent", "lightblue"))))
formattable(as.data.frame(printcp(tree1),
list('CP' = color_tile("transparent", "lightblue"),
'rel error' = color_tile("transparent", "lightblue"),
'xerror' = color_tile("transparent", "lightblue"))))
formattable(as.data.frame(printcp(tree1), list('CP' = color_tile("transparent", "lightblue"),
'rel error' = color_tile("transparent", "lightblue"),
'xerror' = color_tile("transparent", "lightblue"))))
formattable(as.data.frame(printcp(tree1)), list('CP' = color_tile("transparent", "lightblue"),
'rel error' = color_tile("transparent", "lightblue"),
'xerror' = color_tile("transparent", "lightblue")))
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.001, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.003, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 0, branch = 0.5)
tree.pred = predict(tree1, dtest, type="class")
table(tree.pred, dtest$satisfaction)
confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
cm3 <- confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
cm3_matrix <- as.matrix(cm3$table)
fourfoldplot(cm3_matrix, color = c("#FC4E07", "#1B80BF"), conf.level = 0, margin = 1, main = "Confusion Matrix")
tree2 <- rpart(satisfaction ~ ., data = dtrain)
printcp(tree2)
rpart.plot(tree2)
# Selecting the optimal subtree according to the 1-SE rule
tree3 <- prune(tree2)
tree1 <- rpart(satisfaction ~ ., data = dtrain)
tree.pred = predict(tree1, dtest, type="class")
table(tree.pred, dtest$satisfaction)
confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.003, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
formattable(as.data.frame(printcp(tree1)), list('CP' = color_tile("transparent", "lightblue"),
'rel error' = color_tile("transparent", "lightblue"),
'xerror' = color_tile("transparent", "lightblue")))
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 0, branch = 0.5)
tree.pred = predict(tree1, dtest, type="class")
table(tree.pred, dtest$satisfaction)
confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.003, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
formattable(as.data.frame(printcp(tree1)), list('CP' = color_tile("transparent", "lightblue"),
'rel error' = color_tile("transparent", "lightblue"),
'xerror' = color_tile("transparent", "lightblue")))
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 0, branch = 0.5)
tree.pred = predict(tree1, dtest, type="class")
table(tree.pred, dtest$satisfaction)
confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
cm3 <- confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
cm3_matrix <- as.matrix(cm3$table)
fourfoldplot(cm3_matrix, color = c("#FC4E07", "#1B80BF"), conf.level = 0, margin = 1, main = "Confusion Matrix")
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 1, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 2, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 3, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 4, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 5, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 6, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 7, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 8, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 9, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 10, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 11, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 7, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 12, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 7, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 7, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 7, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 10, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 9, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 8, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 7, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 6, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 5, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 4, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 6, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 7, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 7, branch = 0.1)
5
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 7, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 7, branch = 1)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "#1B80BF"),
tweak = 1.5, extra = 7, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE)
rpart.plot(tree1, digits = 2, under = TRUE, box.palette = c("#FC4E07", "lightblue"),
tweak = 1.5, extra = 7, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE,
tweak = 1.5, extra = 7, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, extra = 1, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, extra = 2, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, extra = 3, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, extra = 4, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, extra = 5, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, extra = 6, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, extra = 8, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, extra = 9, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, extra = 10, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, extra = 11, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, extra = 7, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, branch = 0.5)
rpart.plot(tree1, digits = 2, under = TRUE)
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, branch = 0.5)
dtrain$satisfaction[dtrain$satisfaction == 'satisfied'] <- 1
dtrain$satisfaction[dtrain$satisfaction == 'dissatisfied'] <- 0
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, branch = 0.5)
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.003, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
formattable(as.data.frame(printcp(tree1)), list('CP' = color_tile("transparent", "lightblue"),
'rel error' = color_tile("transparent", "lightblue"),
'xerror' = color_tile("transparent", "lightblue")))
dtrain$satisfaction[dtrain$satisfaction == 'satisfied'] <- 1
dtrain$satisfaction[dtrain$satisfaction == 'dissatisfied'] <- 0
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, branch = 0.5)
dtrain$satisfaction[dtrain$satisfaction == 'satisfied'] <- 1
dtrain$satisfaction[dtrain$satisfaction == 'dissatisfied'] <- 0
dtest$satisfaction[dtest$satisfaction == 'satisfied'] <- 1
dtest$satisfaction[dtest$satisfaction == 'dissatisfied'] <- 0
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.003, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
formattable(as.data.frame(printcp(tree1)), list('CP' = color_tile("transparent", "lightblue"),
'rel error' = color_tile("transparent", "lightblue"),
'xerror' = color_tile("transparent", "lightblue")))
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, branch = 0.5)
tree.pred = predict(tree1, dtest, type="class")
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.003, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
formattable(as.data.frame(printcp(tree1)), list('CP' = color_tile("transparent", "lightblue"),
'rel error' = color_tile("transparent", "lightblue"),
'xerror' = color_tile("transparent", "lightblue")))
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, branch = 0.5)
dtrain$satisfaction[dtrain$satisfaction == '1'] <- 'satisfied'
dtrain$satisfaction[dtrain$satisfaction == '0'] <- 'dissatisfied'
dtest$satisfaction[dtest$satisfaction == '1'] <- 'satisfied'
dtest$satisfaction[dtest$satisfaction == '0'] <- 'dissatisfied'
dtrain$satisfaction[dtrain$satisfaction == '1'] <- 'satisfied'
dtrain$satisfaction[dtrain$satisfaction == '0'] <- 'dissatisfied'
dtest$satisfaction[dtest$satisfaction == '1'] <- 'satisfied'
dtest$satisfaction[dtest$satisfaction == '0'] <- 'dissatisfied'
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.003, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
formattable(as.data.frame(printcp(tree1)), list('CP' = color_tile("transparent", "lightblue"),
'rel error' = color_tile("transparent", "lightblue"),
'xerror' = color_tile("transparent", "lightblue")))
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, branch = 0.5)
tree.pred = predict(tree1, dtest, type="class")
table(tree.pred, dtest$satisfaction)
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, branch = 0.5)
tree.pred = predict(tree1, dtest, type="class")
table(tree.pred, dtest$satisfaction)
confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
cm3 <- confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
cm3_matrix <- as.matrix(cm3$table)
fourfoldplot(cm3_matrix, color = c("#FC4E07", "#1B80BF"), conf.level = 0, margin = 1, main = "Confusion Matrix")
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.003, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
formattable(as.data.frame(printcp(tree1)), list('CP' = color_tile("transparent", "lightblue"),
'rel error' = color_tile("transparent", "lightblue"),
'xerror' = color_tile("transparent", "lightblue")))
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, branch = 0.5)
tree.pred = predict(tree1, dtest, type="class")
tree1 <- rpart(satisfaction ~ ., data = dtrain,
control = rpart.control(cp = 0.003, minsplit = 10, maxsurrogate = 10))
printcp(tree1)
formattable(as.data.frame(printcp(tree1)), list('CP' = color_tile("transparent", "lightblue"),
'rel error' = color_tile("transparent", "lightblue"),
'xerror' = color_tile("transparent", "lightblue")))
rpart.plot(tree1, digits = 2, under = TRUE, tweak = 1.5, branch = 0.5)
tree.pred = predict(tree1, dtest, type="class")
table(tree.pred, dtest$satisfaction)
tree.pred = predict(tree1, dtest, type = "class")
table(tree.pred, dtest$satisfaction)
tree.pred = predict(tree1, dtest, type = "class")
table(tree.pred, dtest$satisfaction)
confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
fourfoldplot(cm3_matrix, color = c("#FC4E07", "#1B80BF"), conf.level = 0, margin = 1, main = "Confusion Matrix")
confusionMatrix(as.factor(tree.pred), as.factor(dtest$satisfaction), positive = "satisfied")
library(quantmod)
library(tidyquant)
library(httr)
#Your file_path
path <- getwd()
setwd("C:/Users/adepa/OneDrive/Desktop/Functional Data Analysis/Functional-Data-Analysis-Project/data_stocks")
#Your file_path
path <- getwd()
setwd("C:/Users/adepa/OneDrive/Desktop/Functional Data Analysis/Functional-Data-Analysis-Project/data_stocks")
setwd(file.path(getwd(), "data_stocks"))
#Read CSV
it <- read.csv("it_stocks.csv")
automobile <- read.csv("automobile_stocks.csv")
fashion<- read.csv("fashion_stocks.csv")
healthcare<- read.csv("healthcare_stocks.csv")
food <- read.csv("food_stoks.csv")
oil<- read.csv("oil_stocks.csv")
travel <- read.csv("travel_stocks.csv")
logistics <- read.csv("logistics_stocks.csv")
#Exclude rows for stocks higher than 776
logistics <-logistics[1:776,]
it <- it[1:776,]
automobile <- automobile[1:776,]
fashion <- fashion[1:776,]
healthcare <- healthcare[1:776,]
food <- food[1:776,]
oil <- oil[1:776,]
travel <- oil[1:776,]
#Merge all stocks
st <- cbind.data.frame(logistics,it,automobile,fashion,healthcare,food,oil,travel)
st
#Save the final file
write.csv(df, file = "final_data.csv", row.names = FALSE)
### Start ur code from here###
#Read the file
path <- getwd()
setwd(file.path(getwd(), "data_stocks"))
st <- read.csv("final_data.csv")
which(colnames(st) == "X005930.KS.Close")
#Exclude the stock
st <- st[,-14]
#Visualize stocks for IT
opar <- par(mfrow=c(2,2))
plot(st$day, df$SPOT.Close, type="l", col="blue", lwd=2, xlab="", ylab="SPOT Close",
main="SPOT Close Prices")
plot(st$META.Close, type="l", col="purple", lwd=2, xlab="", ylab="META Close",
main="META Close Prices")
#Visualize stocks for IT
opar <- par(mfrow=c(2,2))
plot(st$SPOT.Close, type="l", col="blue", lwd=2, xlab="", ylab="SPOT Close",
main="SPOT Close Prices")
plot(st$NFLX.Close, type="l", col="red", lwd=2, xlab="", ylab="NFLX Close",
main="NFLX Close Prices")
plot(st$NVDA.Close, type="l", col="green", lwd=2, xlab="", ylab="NVDA Close",
main="NVDA Close Prices")
plot(st$META.Close, type="l", col="purple", lwd=2, xlab="", ylab="META Close",
main="META Close Prices")
dev.off()
#B-splines with penalty
library(fda)
library("fda.usc")
##B-splines
st <- as.matrix(st)
day <- c(1:776)
nrow(st)
#Create a grid for lambda and number of basis
l <- c(0 ,2^seq(-9, 9, len = 40))
nb <- seq(7, 40, by = 2)
time_points <- 1:776
#Create functional ojects with argumen values
fdata_obj <- fdata(t(st), argvals = time_points)
# Smooth with B-splines
out0 <- optim.basis(fdata_obj, lambda = l, numbasis = nb, type.basis = "bspline")
sum((fdata_obj$data - out0$fdata.est)^2)
basis <- create.bspline.basis(c(1,776),nbasis= out0$numbasis.opt, norder = 4)
#Calculate SSE
SSE <-sum((fdata_obj - out0$fdata.est )^2)
gcv = rep(0,40)
df = rep(0,40)
sse = rep(0,40)
#Iterate with different lambda for graph
lambda_seq = c(0 ,2^seq(-9, 9, len = 40))
for(i in 1:40){
lambda=lambda_seq[i]
tD2fdPar = fdPar(basis,Lfdobj=int2Lfd(2),lambda=lambda)
smooth = smooth.basis(day, st, tD2fdPar)
gcv[i] = sum(smooth$gcv)
df[i] = smooth$df
sse[i] = smooth$SSE
}
#Plot df, SSE and GCV
par(mfrow = c(3,1))
plot(0:39,df[1:40],type='l',xlab='log lambda',ylab='df',cex.lab=1.5)
plot(0:39,df[1:40],type='l',xlab='log lambda',ylab='df',cex.lab=1.5)
plot(0:39,sse[1:40],type='l',xlab='log lambda',ylab='sse',cex.lab=1.5)
plot(0:39,gcv[1:40],type='l',xlab='log lambda',ylab='gcv',cex.lab=1.5)
#Plot df, SSE and GCV
par(mfrow = c(3,1))
plot(0:39,df[1:40],type='l',xlab='log lambda',ylab='df',cex.lab=1.5)
plot(0:39,sse[1:40],type='l',xlab='log lambda',ylab='sse',cex.lab=1.5)
plot(0:39,gcv[1:40],type='l',xlab='log lambda',ylab='gcv',cex.lab=1.5)
dev.off()
#Find optimal lambda
optimal_lambda_index = which.min(gcv)
optimal_lambda = lambda_seq[optimal_lambda_index]
optimal_df = df[optimal_lambda_index]
optimal_sse = sse[optimal_lambda_index]
tD3fdPar = fdPar(basis,Lfdobj=int2Lfd(2),lambda=out0$lambda.opt)
smooth <- smooth.basis(day,st,tD3fdPar)
smooth$SSE
plot(smooth)
plot(out0)
plot(out0$fdataobj)
names(out0$fdataobj)
dim(t(out0$fdataobj$data))
dim(t(st))
SSE <-sum((st - t(out0$fdataobj$data))^2)
st[1,]
plot(smooth)
plot(out0)
plot(smooth)
plot(out0)
plot(out0$fdataobj)
plot(smooth)
plot(out0$fdataobj)
names(out0$fdataobj)
dim(t(out0$fdataobj$data))
dim(t(st))
SSE <-sum((st - t(out0$fdataobj$data))^2)
st[1,]
library(DepthProc)
library(MultiRNG)
install.packages('DepthProc')
library(DepthProc)
install.packages('MultiRNG')
library(DepthProc)
library(MultiRNG)
st <- as.matrix(st)
dp_st <- matrix(NA, nrow = nrow(st), ncol = 4)
rownames(dp_st) <- 1:nrow(st)  # Nominiamo le righe (opzionale)
colnames(dp_st) <- c("Projection", "Mahalanobis", "Euclidean", "Tukey")
# Calcoliamo la depth per ogni metodo
dp_st[,1] <- depth(st, st, method = "Projection")
dp_st[,2] <- depth(st, st, method = "Mahalanobis")
dp_st[,3] <- depth(st, st, method = "Euclidean")
dp_st[,4] <- depth(st, st, method = "Tukey")
# Stampiamo il risultato
print(dp_st)
