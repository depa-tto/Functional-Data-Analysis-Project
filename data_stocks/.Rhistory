st <- read.csv("final_data.csv")
path <- getwd()
path
setwd(file.path(getwd(), "data_stocks"))
st <- read.csv("final_data.csv")
log_returns <- apply(st, 2, function(x) c(diff(log(x))))
st <- 100*log_returns
st
basis <- create.bspline.basis(c(1,755),nbasis= 30, norder = 4)
# B-splines with penalty
library(fda)
library(fda.usc)
st <- as.matrix(st)
day <- c(1:755)
nrow(st)
# Create a grid for lambda and number of basis
l <- c(0 ,2^seq(-9, 9, len = 40))
nb <- seq(7, 40, by = 2)
time_points <- 1:756
# Create functional ojects with argumen values
fdata_obj <- fdata(t(st), argvals = time_points)
basis <- create.bspline.basis(c(1,755),nbasis= 30, norder = 4)
tD3fdPar = fdPar(basis,Lfdobj=int2Lfd(2),lambda=200)
smooth <- smooth.basis(day,st,tD3fdPar)
smooth$SSE
plot(smooth)
plotfit.fd(st,day,smooth$fd)
plot(smooth)
library(fda)
nharm = 3
pcalist = pca.fd(smooth$fd, nharm, centerfns = TRUE)
plot(pcalist)
varmx <- varmx.pca.fd(pcalist)
plot(varmx)
varmx <- varmx.pca.fd(pcalist)
plot(varmx)
plot(smooth)
sum(is.na(st))
st <- read.csv("weekly_stock_prices_cleaned.csv")
st
dim(st)
st <- as.data.frame(st)
log_returns <- apply(st, 2, function(x) c(diff(log(x))))
st <- st[,-1]
log_returns <- apply(st, 2, function(x) c(diff(log(x))))
dim(log_returns)
st <- 100*log_returns
st
st <- read.csv("weekly_stock_prices_cleaned.csv")
st <- st[,-1]
st
log_returns <- apply(st, 2, function(x) c(diff(log(x))))
dim(log_returns)
st <- 100*log_returns
### B-splines
st <- as.matrix(st)
day <- c(1:156)
l <- c(0 ,2^seq(-9, 9, len = 40))
nb <- seq(7, 40, by = 2)
time_points <- 1:156
# Create functional ojects with argumen values
fdata_obj <- fdata(t(st), argvals = time_points)
out0 <- optim.basis(fdata_obj, lambda = l, numbasis = nb, type.basis = "bspline")
sum((fdata_obj$data - out0$fdata.est)^2)
basis <- create.bspline.basis(c(1,756),nbasis= out0$numbasis.opt, norder = 4)
SSE <-sum((fdata_obj - out0$fdata.est )^2)
SSE
gcv = rep(0,40)
df = rep(0,40)
sse = rep(0,40)
# Iterate with different lambda for graph
lambda_seq = c(0 ,2^seq(-9, 9, len = 40))
for(i in 1:40){
lambda=lambda_seq[i]
tD2fdPar = fdPar(basis,Lfdobj=int2Lfd(2),lambda=lambda)
smooth = smooth.basis(day, st, tD2fdPar)
gcv[i] = sum(smooth$gcv)
df[i] = smooth$df
sse[i] = smooth$SSE
}
basis <- create.bspline.basis(c(1,156),nbasis= out0$numbasis.opt, norder = 4)
lambda_seq = c(0 ,2^seq(-9, 9, len = 40))
for(i in 1:40){
lambda=lambda_seq[i]
tD2fdPar = fdPar(basis,Lfdobj=int2Lfd(2),lambda=lambda)
smooth = smooth.basis(day, st, tD2fdPar)
gcv[i] = sum(smooth$gcv)
df[i] = smooth$df
sse[i] = smooth$SSE
}
par(mfrow = c(3,1))
plot(0:39,df[1:40],type='l',xlab='log lambda',ylab='df',cex.lab=1.5)
plot(0:39,sse[1:40],type='l',xlab='log lambda',ylab='sse',cex.lab=1.5)
plot(0:39,gcv[1:40],type='l',xlab='log lambda',ylab='gcv',cex.lab=1.5)
dev.off()
gcv = rep(0,40)
df = rep(0,40)
sse = rep(0,40)
# Iterate with different lambda for graph
lambda_seq = c(0 ,2^seq(-9, 9, len = 40))
for(i in 1:40){
lambda=lambda_seq[i]
tD2fdPar = fdPar(basis,Lfdobj=int2Lfd(2),lambda=lambda)
smooth = smooth.basis(day, st, tD2fdPar)
gcv[i] = sum(smooth$gcv)
df[i] = smooth$df
sse[i] = smooth$SSE
}
optimal_lambda_index = which.min(gcv)
optimal_lambda = lambda_seq[optimal_lambda_index]
optimal_df = df[optimal_lambda_index]
optimal_sse = sse[optimal_lambda_index]
basis <- create.bspline.basis(c(1,755),nbasis= 30, norder = 4)
optimal_lambda
tD3fdPar = fdPar(basis,Lfdobj=int2Lfd(2),lambda=optimal_lambda)
smooth <- smooth.basis(day,st,tD3fdPar)
smooth$SSE
plot(smooth)
day
st
sum(is.na(st))
smooth <- smooth.basis(day,st,tD3fdPar)
smooth <- smooth.basis(day,st,tD3fdPar)
smooth$SSE
plot(smooth)
st <- read.csv("weekly_stock_prices_cleaned.csv")
plot(st$SPOT.Close, type="l", col="blue", lwd=2, xlab="", ylab="SPOT Close",
main="SPOT Close Prices")
plot(st$NFLX.Close, type="l", col="red", lwd=2, xlab="", ylab="NFLX Close",
main="NFLX Close Prices")
plot(st$NVDA.Close, type="l", col="green", lwd=2, xlab="", ylab="NVDA Close",
main="NVDA Close Prices")
plot(st$META.Close, type="l", col="purple", lwd=2, xlab="", ylab="META Close",
main="META Close Prices")
opar <- par(mfrow=c(2,2))
plot(st$AAPL.Close, type="l", col="blue", lwd=2, xlab="", ylab="APPL Close",
main="APPL Close Prices")
plot(st$IBM.Close, type="l", col="red", lwd=2, xlab="", ylab="IBM Close",
main="IBM Close Prices")
plot(st$MSFT.Close, type="l", col="green", lwd=2, xlab="", ylab="MSFT Close",
main="MSFT Close Prices")
plot(st$GOOG.Close, type="l", col="purple", lwd=2, xlab="", ylab="GOOG Close",
main="GOOG Close Prices")
st <- st[,-1]
st
log_returns <- apply(st, 2, function(x) c(diff(log(x))))
st <- 100*log_returns
plot(st$AAPL.Close, type="l", col="blue", lwd=2, xlab="", ylab="APPL Close",
main="APPL Close Prices")
st <- data.frame(st)
opar <- par(mfrow=c(2,2))
plot(st$SPOT.Close, type="l", col="blue", lwd=2, xlab="", ylab="SPOT Close",
main="SPOT Close Prices")
plot(st$NFLX.Close, type="l", col="red", lwd=2, xlab="", ylab="NFLX Close",
main="NFLX Close Prices")
plot(st$NVDA.Close, type="l", col="green", lwd=2, xlab="", ylab="NVDA Close",
main="NVDA Close Prices")
plot(st$META.Close, type="l", col="purple", lwd=2, xlab="", ylab="META Close",
main="META Close Prices")
opar <- par(mfrow=c(2,2))
plot(st$AAPL.Close, type="l", col="blue", lwd=2, xlab="", ylab="APPL Close",
main="APPL Close Prices")
plot(st$IBM.Close, type="l", col="red", lwd=2, xlab="", ylab="IBM Close",
main="IBM Close Prices")
plot(st$MSFT.Close, type="l", col="green", lwd=2, xlab="", ylab="MSFT Close",
main="MSFT Close Prices")
plot(st$GOOG.Close, type="l", col="purple", lwd=2, xlab="", ylab="GOOG Close",
main="GOOG Close Prices")
# Create functional ojects with argumen values
fdata_obj <- fdata(t(st), argvals = time_points)
fdata_obj
out0 <- optim.basis(fdata_obj, lambda = l, numbasis = nb, type.basis = "bspline")
sum((fdata_obj$data - out0$fdata.est)^2)
basis <- create.bspline.basis(c(1,156),nbasis= out0$numbasis.opt, norder = 4)
# Smooth with B-splines
out0 <- optim.basis(fdata_obj, lambda = l, numbasis = nb, type.basis = "bspline")
out0$fdata.est
plot(out0$fdata.est)
basis <- create.bspline.basis(c(1,156),nbasis= out0$numbasis.opt, norder = 4)
out0$numbasis.opt
lambda_seq = c(0 ,2^seq(-9, 9, len = 40))
for(i in 1:40){
lambda=lambda_seq[i]
tD2fdPar = fdPar(basis,Lfdobj=int2Lfd(2),lambda=lambda)
smooth = smooth.basis(day, st, tD2fdPar)
gcv[i] = sum(smooth$gcv)
df[i] = smooth$df
sse[i] = smooth$SSE
}
gcv = rep(0,40)
df = rep(0,40)
sse = rep(0,40)
# Iterate with different lambda for graph
lambda_seq = c(0 ,2^seq(-9, 9, len = 40))
for(i in 1:40){
lambda=lambda_seq[i]
tD2fdPar = fdPar(basis,Lfdobj=int2Lfd(2),lambda=lambda)
smooth = smooth.basis(day, st, tD2fdPar)
gcv[i] = sum(smooth$gcv)
df[i] = smooth$df
sse[i] = smooth$SSE
}
st
st <- as.matrix(st)
basis <- create.bspline.basis(c(1,156),nbasis= out0$numbasis.opt, norder = 4)
SSE <-sum((fdata_obj - out0$fdata.est )^2)
SSE
gcv = rep(0,40)
df = rep(0,40)
sse = rep(0,40)
# Iterate with different lambda for graph
lambda_seq = c(0 ,2^seq(-9, 9, len = 40))
for(i in 1:40){
lambda=lambda_seq[i]
tD2fdPar = fdPar(basis,Lfdobj=int2Lfd(2),lambda=lambda)
smooth = smooth.basis(day, st, tD2fdPar)
gcv[i] = sum(smooth$gcv)
df[i] = smooth$df
sse[i] = smooth$SSE
}
par(mfrow = c(3,1))
plot(0:39,df[1:40],type='l',xlab='log lambda',ylab='df',cex.lab=1.5)
plot(0:39,sse[1:40],type='l',xlab='log lambda',ylab='sse',cex.lab=1.5)
plot(0:39,gcv[1:40],type='l',xlab='log lambda',ylab='gcv',cex.lab=1.5)
tD3fdPar = fdPar(basis,Lfdobj=int2Lfd(2),lambda=optimal_lambda)
smooth <- smooth.basis(day,st,tD3fdPar)
plot(smooth)
par(opar)
plot(smooth)
plotfit.fd(st,day,smooth$fd)
library(fda)
nharm = 3
pcalist = pca.fd(smooth$fd, nharm, centerfns = TRUE)
plot(pcalist)
plot(pcalist$harmonics)
plot(pcalist$harmonics)
plot(pcalist$harmonics)
plot(pcalist)
plot(varmx)
par(opar)
varmx <- varmx.pca.fd(pcalist)
plot(varmx)
par(opar)
varmx <- varmx.pca.fd(pcalist)
plot(varmx)
plot(pcalist)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
out1 <- optim.np(fdata_obj , type.S = S.NW, h = 3:50,par.CV = list(criteria = "GCV"))#Local regression
out2 <- optim.np(fdata_obj, type.S = S.LLR,h = 3:50, par.CV = list(criteria = "GCV"))#Local kernel
out3 <- optim.np(fdata_obj, type.S = S.KNN, h = 3:50, Ker = Ker.norm) # Normal Kernel
out4 <- optim.np(fdata_obj, type.S = S.NW, h = 3:50, Ker = Ker.tri, correl = FALSE) #Triweight Kernel
out5 <- optim.np(fdata_obj, type.S = S.NW, h = 3:50, Ker = Ker.epa, correl = FALSE) #Epanechnikov Kerne
out6 <- optim.np(fdata_obj, type.S = S.NW, h = 3:50, Ker = Ker.unif, correl = FALSE) #Uniform Kernel
SSE_out0 <-sum((fdata_obj - out0$fdata.est )^2)
SSE_out1 <-sum((fdata_obj - out1$fdata.est )^2)
SSE_out2 <-sum((fdata_obj - out2$fdata.est )^2)
SSE_out3 <-sum((fdata_obj - out3$fdata.est )^2)
SSE_out4 <-sum((fdata_obj - out4$fdata.est )^2)
SSE_out5 <-sum((fdata_obj - out5$fdata.est )^2)
SSE_out6 <-sum((fdata_obj - out6$fdata.est )^2)
gcv_values <- c(out0$gcv.opt, out1$gcv.opt, out2$gcv.opt, out3$gcv.opt,
out4$gcv.opt, out5$gcv.opt, out6$gcv.opt)
gcv_values
sse_values_adjusted <- sse_values[-1]
sse_values <- c(SSE_out0, SSE_out1, SSE_out2, SSE_out3, SSE_out4, SSE_out5, SSE_out6)
sse_values
basis <- create.bspline.basis(c(1,156),nbasis= out0$numbasis.opt, norder = 4)
p
gcv = rep(0,40)
df = rep(0,40)
sse = rep(0,40)
# Iterate with different lambda for graph
lambda_seq = c(0 ,2^seq(-9, 9, len = 40))
for(i in 1:40){
lambda=lambda_seq[i]
tD2fdPar = fdPar(basis,Lfdobj=int2Lfd(2),lambda=lambda)
smooth = smooth.basis(day, st, tD2fdPar)
gcv[i] = sum(smooth$gcv)
df[i] = smooth$df
sse[i] = smooth$SSE
}
par(mfrow = c(3,1))
plot(0:39,df[1:40],type='l',xlab='log lambda',ylab='df',cex.lab=1.5)
plot(0:39,sse[1:40],type='l',xlab='log lambda',ylab='sse',cex.lab=1.5)
plot(0:39,gcv[1:40],type='l',xlab='log lambda',ylab='gcv',cex.lab=1.5)
dev.off()
png("sse_plot.png", width = 800, height = 600)
plot(seq(-9, 9, len = 40), sse[1:40], type = 'l',
xlab = 'log(lambda)', ylab = 'SSE',
cex.lab = 1.5, lwd = 2, col = 'blue',
main = 'SSE vs. log(lambda)', cex.main = 1.8)
grid()
dev.off()
png("gcv_plot.png", width = 800, height = 600)
plot(seq(-9, 9, len = 40), gcv[1:40], type = 'l',
xlab = 'log(lambda)', ylab = 'GCV',
cex.lab = 1.5, lwd = 2, col = 'red',
main = 'GCV vs. log(lambda)', cex.main = 1.8)
grid()
dev.off()
out1 <- optim.np(fdata_obj , type.S = S.NW, h = 3:50,par.CV = list(criteria = "GCV"))#Local regression
out2 <- optim.np(fdata_obj, type.S = S.LLR,h = 3:50, par.CV = list(criteria = "GCV"))#Local kernel
out3 <- optim.np(fdata_obj, type.S = S.KNN, h = 3:50, Ker = Ker.norm) # Normal Kernel
out4 <- optim.np(fdata_obj, type.S = S.NW, h = 3:50, Ker = Ker.tri, correl = FALSE) #Triweight Kernel
out5 <- optim.np(fdata_obj, type.S = S.NW, h = 3:50, Ker = Ker.epa, correl = FALSE) #Epanechnikov Kerne
out6 <- optim.np(fdata_obj, type.S = S.NW, h = 3:50, Ker = Ker.unif, correl = FALSE) #Uniform Kernel
SSE_out0 <-sum((fdata_obj - out0$fdata.est )^2)
SSE_out1 <-sum((fdata_obj - out1$fdata.est )^2)
SSE_out2 <-sum((fdata_obj - out2$fdata.est )^2)
SSE_out3 <-sum((fdata_obj - out3$fdata.est )^2)
SSE_out4 <-sum((fdata_obj - out4$fdata.est )^2)
SSE_out5 <-sum((fdata_obj - out5$fdata.est )^2)
SSE_out6 <-sum((fdata_obj - out6$fdata.est )^2)
gcv_values <- c(out0$gcv.opt, out1$gcv.opt, out2$gcv.opt, out3$gcv.opt,
out4$gcv.opt, out5$gcv.opt, out6$gcv.opt)
# Define labels for each method
methods <- c("B-splines", "NW", "LR", "Normal ", "Triweight ", "Epanech.", "Uniform")
png("GCV_comparison_plot.png", width = 1200, height = 800)
par(mar = c(5, 7, 4, 2) + 0.1)  # Adjust margins for better text spacing
# Create the barplot without rotating labels
bp <- barplot(gcv_values, names.arg = methods, col = "skyblue",
main = "GCV Comparison by smoothing methods",
ylab = "GCV Value", cex.names = 2, cex.lab = 2, cex.main = 3,
ylim = c(0, max(gcv_values) * 1.1), border = "white")
png("GCV_comparison_plot.png", width = 1200, height = 800)
par(mar = c(5, 7, 4, 2) + 0.1)  # Adjust margins for better text spacing
# Create the barplot without rotating labels
bp <- barplot(gcv_values, names.arg = methods, col = "skyblue",
main = "GCV Comparison by smoothing methods",
ylab = "GCV Value", cex.names = 2, cex.lab = 2, cex.main = 3,
ylim = c(0, max(gcv_values) * 1.1), border = "white")
# Add horizontal grid lines for clarity
grid(nx = NULL, ny = NULL, col = "gray90", lty = 2)
dev.off()
sse_values <- c(SSE_out0, SSE_out1, SSE_out2, SSE_out3, SSE_out4, SSE_out5, SSE_out6)
# Plot SSE values
png("SSE_comparison_plot.png", width = 1200, height = 800)
sse_values_adjusted <- sse_values[-1]  # Adjust SSE values if removing the first method
methods_adjusted <- methods[-1]  # Adjust method names to match
options(scipen = 999)
# Improved plot for SSE values
png("SSE_comparison_plot.png", width = 1200, height = 800)
par(mar = c(5, 7, 4, 2) + 0.1)  # Adjust margins
# Create the barplot without rotating labels
bp_sse <- barplot(sse_values, names.arg = methods, col = "lightcoral",
main = "SSE Comparison by smoothing methods",
ylab = "Sum of Squared Errors",
cex.names = 2, cex.lab = 2, cex.main = 3,
ylim = c(0, max(sse_values) * 1.1), border = "white")
# Add horizontal grid lines for better readability
grid(nx = NULL, ny = NULL, col = "gray90", lty = 2)
dev.off()  # Save the plot to file
bp_sse <- barplot(sse_values, names.arg = methods, col = "lightcoral",
main = "SSE Comparison by smoothing methods",
ylab = "Sum of Squared Errors",
cex.names = 2, cex.lab = 2, cex.main = 3,
ylim = c(0, max(sse_values) * 1.1), border = "white")
png("gcv_criteria_plot.png", width = 1200, height = 800)
# Set plot margins and background for better visuals
par(mar = c(5, 6, 4, 8) + 0.1, bg = "white")  # Increased right margin for space
# Main plot with better aesthetics
plot(out1$h, out1$gcv, type = "l",
main = "GCV Criteria",
xlab = "Bandwidth (h) Values",
ylab = "GCV Criteria",
col = "forestgreen", lwd = 3,
cex.lab = 1.8, cex.main = 2, cex.axis = 1.5)
# Add grid lines for better clarity
grid(lty = "dotted", col = "gray70")
# Add additional lines with unique colors and styles
lines(out2$h, out2$gcv, col = "royalblue", lwd = 3, lty = 2)
lines(out3$h, out3$gcv, col = "darkorange", lwd = 3, lty = 3)
lines(out4$h, out4$gcv, col = "purple", lwd = 3, lty = 4)
lines(out5$h, out5$gcv, col = "firebrick", lwd = 3, lty = 5)
lines(out6$h, out6$gcv, col = "goldenrod", lwd = 3, lty = 6)
# Improved legend with larger text and custom position (left side)
legend("left", inset = c(0.01, 0),
legend = c("Ker.norm-S.NW", "Ker.norm-S.LLR",
"Ker.norm-S.KNN", "Ker.tri-S.NW",
"Ker.epa-S.NW", "Ker.unif-S.NW"),
col = c("forestgreen", "royalblue", "darkorange",
"purple", "firebrick", "goldenrod"),
lwd = 3, lty = 1:6,
box.col = "white", cex = 2)
# Close the graphics device to save the image
dev.off()
plot(out0$fdata.est[1,],col ="blue", lwd = 3)
points(st[,1], col = "red")
png("B-splines fitted.png", width = 1200, height = 800)
plot(out0$fdata.est[1,], col = "blue", lwd = 3,
main = "B-splines fitted",
xlab = "Time", ylab = "Price",
cex.main = 3, cex.lab = 2, cex.axis = 2)
png("Normal kernel fitted.png", width = 1200, height = 800)
plot(out3$fdata.est[1,], col = "blue", lwd = 3,
main = "Normal kernel fitted",
xlab = "Time", ylab = "Price",
cex.main = 3, cex.lab = 2, cex.axis = 2)
png("B-splines fitted.png", width = 1200, height = 800)
plot(out0$fdata.est[1,], col = "blue", lwd = 3,
main = "B-splines fitted",
xlab = "Time", ylab = "Price",
cex.main = 3, cex.lab = 2, cex.axis = 2)
# Add red points for the second data
points(st[, 1], col = "red", cex = 2)
dev.off()
png("Normal kernel fitted.png", width = 1200, height = 800)
plot(out3$fdata.est[1,], col = "blue", lwd = 3,
main = "Normal kernel fitted",
xlab = "Time", ylab = "Price",
cex.main = 3, cex.lab = 2, cex.axis = 2)
# Add red points for the second data
points(st[, 1], col = "red", cex = 2)
dev.off()
basis <- create.bspline.basis(c(1,776),nbasis= out0$numbasis.opt, norder = 4)
tD3fdPar = fdPar(basis,Lfdobj=int2Lfd(2),lambda=out0$lambda.opt)
smooth <- smooth.basis(day,st,tD3fdPar)
library(fda)
nharm = 3
pcalist = pca.fd(smooth$fd, nharm, centerfns = TRUE)
plot(pcalist)
library(fda)
nharm = 6
pcalist = pca.fd(smooth$fd, nharm, centerfns = TRUE)
plot(pcalist)
dev.off()
}
for (i in 1:6) {
png(paste0("pca_plot_", i, ".png"), width = 800, height = 600)
plot(pcalist, harm = i)  # 'harm' specifies which component to plot
dev.off()
}
basis <- create.bspline.basis(c(1,156),nbasis= 7, norder = 4)
tD3fdPar = fdPar(basis,Lfdobj=int2Lfd(2),lambda=600)
smooth <- smooth.basis(day,st,tD3fdPar)
day
smooth$SSE
plot(smooth)
